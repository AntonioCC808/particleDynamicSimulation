
package pds.outputModule;

import java.awt.*;
import pds.common.*;
import java.awt.image.*;
import java.io.*;
import javax.imageio.*;
public class Output implements pds.common.IOutput {
  /**
   * 
   * The experiment object, with (almost) all information to generate output, with particles positions
   * and with all constants necesary to convert units.
   * 
   */
  private pds.common.InputData experiment;

  /**
   * 
   * The results files object, whose names are taken, edited (with the extension), and then returned.
   * 
   */
  private pds.common.ResultsFiles resultsFiles;

  /**
   * 
   * The object of the inner class resultFiles. To be created only once, and used by all private methods.
   * 
   */
  private Output.OutputTextFiles files;

  /**
   * This static method returns an OutputModule object that implements the interface IOutput.
   * It does nothing else, as experiment data is not given yet.
   * 
   * @return an object that implements the interface IOutput
   */
  public static pds.common.IOutput createOutput()
  {
return new Output();
  }

  /**
   * This makes the results for the experiment, making the text files and the plots. The names
   * of all the files are written in the resultFiles object (overwritng it).
   * 	@param experiment Is the experiment object with the data needed to retrive
   * the simulation results (without the extensions).
   * 	@return returns The ResultsFile object with the names of all the requested 
   * resulting images and data files generated. If any of those files could not 
   * be generated the corresponding string would be a null reference. This includes the
   * extensions of each file. Also, this is the same as the resultFiles given object.
   */
  public ResultsFiles results(pds.common.InputData experiment, pds.common.ResultsFiles resultsFiles) {
	return null;
  }

  /**
   * This creates the output object (but does nothing else).
   */
  public Output() {
  }

  /**
   * This creates the energy plot (with the kinetic energy, the potential energy and the total
   * one as function of the step number). It gives the image and a text file with data. The names
   * of the files are writen in files, the object from ResultsFiles.
   */
  private void energyPlot() {
  }

  /**
   * This method generates the output for the initial velocity histogram. It both generates an
   * image and a text file, and register it's names in files, from resultsFiles object.
   */
  private void velocityPlot() {
  }

  /**
   * This generates a pair distribution function plot. It both represents it in an image and
   * writes the data in a text file. Then, the names of those files are included in files, the
   * object of ResultsFiles.
   */
  private void pairDistributionPlot() {
  }

  protected class OutputTextFiles {
    /**
     * The constructor. Initialization of general features can be done here.
     */
    public OutputTextFiles() {
    }

    /**
     * Method that makes a .txt file with the velocity (in its units) with the frecuency 
     * of each one.
     * This .txt file contains 2 columns, one with the velocities and another with the 
     * frecuencies.
     * 	@param velocityData A 2 dimensional array. The first cordinate can be 0
     * 	(for the x points, velocities) or 1 (for the y points, frequency of them). 
     * 	The second index refeers to each point. 
     */
    public void velocityTextFile(double[][] velocityData) {
      try {
      			resultsFiles.velocitiesHistogramData = resultsFiles.velocitiesHistogramData + ".txt";
      			File file = new File(resultsFiles.velocitiesHistogramData);
      			PrintWriter writer;
      			writer = new PrintWriter(file);
      
      			switch (experiment.unitSystem) {
      			case IS:
      				writer.printf("%-14s %-14s", "Velocity /m/s", "P(v)"); //for IS 
      				break;
      			case CGS:
      				writer.printf("%-14s %-14s", "Velocity /cm/s", "P(v)"); //for CGS
      				break;
      			default:
      				writer.printf("%-14s %-14s", "Velocity /iu", "P(v)"); //for internal units
      				break;	
      			}
      
      			writer.println();
      
      			for (int i = 0; i < velocityData[0].length; i++) {
      
      				double vel = velocityData[0][i];
      				double frec = velocityData[1][i];
      
      				writer.printf("%-14.5E %-14.5E", vel, frec); //this makes two columns, one for the velocities 
      														  //and the other to the frecuencies
      				writer.println();
      			}
      
      			writer.close();
      		} catch (Exception e) { //the name of the .txt archive is null
      			resultsFiles.velocitiesHistogramData = null;
      		}
    }

    /**
     * Method that makes a .txt file with the distance between 2 particles 'r' (in its units),
     * the value of the pair distribution function in that point and the value of the potential
     * in the same 'r'.
     * This .txt file contains 3 columns, one with the values of 'r', another with the
     * values of the pair distribution function 'G(r)', and another with the values of the
     * potential 'V(r)'.
     * 	@param pairDistributionData A 3 dimensional array. The first cordinate can be 0 
     * 	(for the x points, the distances), 1 (for the y points, the values of 'G(r)'),
     * 	or 2 (for the y points, the values of 'V(r)').
     * 	 The second index refeers to each point. 
     */
    public void pairDistributionTextFile(double[][] pairDistributionData) {
      try {
      			resultsFiles.potentialAndPairDistFunctionData = resultsFiles.potentialAndPairDistFunctionData + ".txt";
      			File file = new File(resultsFiles.potentialAndPairDistFunctionData);
      			PrintWriter writer;
      			writer = new PrintWriter(file);
      
      			switch (experiment.unitSystem) {
      			case IS:
      				writer.printf("%-14s %-14s %-14s", "r /m", "G(r)", "Pot. /J"); //for IS
      				break;
      			case CGS:
      				writer.printf("%-14s %-14s %-14s", "r /cm", "G(r)", "Pot. /erg"); //for CGS
      				break;
      			default:
      				writer.printf("%-14s %-14s %-14s", "r /sigma", "G(r)", "Pot. /eps"); //for internal units
      				break;	
      			}
      
      			writer.println();
      
      			for (int i = 0; i < pairDistributionData[0].length; i++) {
      
      				double r = pairDistributionData[0][i];
      				double func = pairDistributionData[1][i];
      				double pot = pairDistributionData[2][i];
      
      				writer.printf("%-14.5E %-14.5E %-14.5E", r, func, pot); //this makes three columns, one for the distances
      																		//other for the pair distribution function values
      																		//and other for the potential values
      				writer.println();
      			}
      
      			writer.close();
      		} catch (Exception e) { //the name of the .txt archive is null
      			resultsFiles.potentialAndPairDistFunctionData = null;
      		}
    }

    /**
     * Method that makes a .txt file with the steps and with the potential, kinetic and total
     * energy (in its units).
     * This .txt file contains 4 columns, one with the steps, another with the values of the 
     * potential energies, another with the values of the kinetic energies and the last one
     * with the values of the total energy.
     * 	@param velocityData A 4 dimensional array. The first cordinate can be 0
     * 	(for the x points, the step), 1 (for the y points, the potential energy),
     * 	2 (for the y points, the kinetic energy) or 3 (for the y points,
     * 	the total energy). 
     * 	The second index refeers to is point. 
     */
    public void energyTextFile(double [][] energyData) {
      	try {
      			resultsFiles.energyData = resultsFiles.energyData + ".txt";
      			File file = new File(resultsFiles.energyData);
      			PrintWriter writer;
      			writer = new PrintWriter(file);
      
      			switch (experiment.unitSystem) {
      			case IS:
      				writer.printf("%-14s %-14s %-14s %-14s", "Step", "Potential /J", "Kinetic /J", "Total /J"); //for IS
      				break;
      			case CGS:
      				writer.printf("%-14s %-14s %-14s %-14s", "Step", "Potential /erg", "Kinetic /erg", "Total /erg"); //for CGS
      				break;
      			default:
      				writer.printf("%-14s %-14s %-14s %-14s", "Step", "Potential /eps", "Kinetic /eps", "Total /eps"); //for internal units
      				break;	
      			}
      
      			writer.println();
      
      			for (int i = 0; i < energyData[0].length; i++) {
      
      				double step = energyData[0][i];
      				double ePot = energyData[1][i];
      				double eKin = energyData[2][i];
      				double eTot = energyData[3][i];
      
      				writer.printf("%-14.5E %-14.5E %-14.5E %-14.5E", step, ePot, eKin, eTot); //this makes four columns,
      																						  //one of the step, and the 
      																						  //others for the potential, 
      																						  //kinetic and total energies
      				writer.println();
      			}
      
      			writer.close();
      		} catch (Exception e) { //the name of the .txt archive is null
      			resultsFiles.energyData = null;
      		}
    }

  }

  protected class OutputMovies {
    /**
     * This converts the internal units to Amstrong (for the output in XCryDen).
     */
    private double lengthConverterA;

    /**
     * The factor to convert the velotity units from internal to the ones of the movies.
     */
    private double velocityConverterA;

    /**
     * The factor to convert the force (or acelerations) units from internal to the ones of the movies.
     */
    private double forceConverterA;

    /**
     * This is the number of steps the movie will have.
     */
    private int nSteps = experiment.movie.size();

    /**
     * This is the number of atoms the unit cell has. It depends on the kind (FCC or BCC).
     */
    private int nPartCell;

    /**
     * The constructor for OutputMovies, where some features are intitalized (unit conversion...)
     */
    public OutputMovies() {
      switch (experiment.unitSystem) {
      case IS:
      lengthConverterA = Math.pow(10, -10) * experiment.lengthParam * experiment.systemSize;
      velocityConverterA = 1;
      forceConverterA = 1;
      break;
      case CGS:
      lengthConverterA = Math.pow(10, -8) * experiment.lengthParam * experiment.systemSize;
      velocityConverterA = 1;
      forceConverterA = 1;
      break;
      default:
      lengthConverterA = 1;
      velocityConverterA = 1;
      forceConverterA = 1;
      }
      /**
      * Number of atoms per cell.
      */
      switch (experiment.initialLattice) {
      case FCC:
      nPartCell = 4;
      break;
      default:
      nPartCell = 1;
      }
    }

    /**
     * This creates a movie with the particle's positions. It exports a text file which, latter on,
     * can be read by xCryDen program (externaly). The name of the file is included in files, the
     * objet from ResultsFiles.
     */
    public void positionMovie() {
      try {
      double factorXcry = experiment.cellsInMoviePerAxis * experiment.cellSize;
      resultsFiles.positionMovieData = resultsFiles.positionMovieData + ".xsf";
      int index = 1;
      /**
      * The text file is created with its name.
       */
      File archivo = new File(resultsFiles.positionMovieData);
      FileWriter escribir = new FileWriter(archivo, true);
      /**
      * This will be the top of the text file with an appropriate structure to be
      * read by XCrysden.
      */
      escribir.write("ANIMSTEPS " + nSteps + "\n");
      escribir.write("CRYSTAL \n");
      escribir.write("PRIMVEC\n");
      escribir.write("0" + factorXcry + factorXcry + "\n");
      escribir.write(factorXcry + "0" + factorXcry + "\n");
      escribir.write(factorXcry + factorXcry + "0 \n");
      /**
      * The states are gone over with in each will be some more XCrysden structure.
      */
      for (State s : experiment.evolution) {
      escribir.write("PRIMCOORD" + index++ + "\n");
      escribir.write(nPartCell + "    1\n");
      /**
      * Particles involved in the film are gone over and positions are printed in the
      * file.
      */
      for (Particle p : s.particles) {
      double x = p.r.x * lengthConverterA;
      double y = p.r.y * lengthConverterA;
      double z = p.r.z * lengthConverterA;
      escribir.write(experiment.atomicNumber + " " + x + " " + y + " " + z + "\n");
      }
      }
      escribir.close();
      } catch (Exception e) {
      resultsFiles.positionMovieData = null;
      }
    }

    /**
     * This creates a velocity movie, with the particle's positions and the velocities represented
     * as arrows. It exports a text file which, latter on, can be read by xCryDen program
     * (externaly). The name of the files are included in files, object from ResultsFiles.
     */
    public void velocityMovie() {
      try {
      double factorXcry = experiment.cellsInMoviePerAxis * experiment.cellSize;
      int index = 1;
      resultsFiles.velocityMovieData = resultsFiles.velocityMovieData + ".xsf";
      /**
      * The text file is created with its name and start writing.
      */
      File archivo = new File(resultsFiles.velocityMovieData);
      FileWriter escribir = new FileWriter(archivo, true);
      /**
      * This will be the top of the text file with an appropriate structure to be
      * read by XCrysden.
      */
      escribir.write("ANIMSTEPS " + nSteps + "\n");
      escribir.write("CRYSTAL \n");
      escribir.write("PRIMVEC\n");
      escribir.write("0" + factorXcry + factorXcry + "\n");
      escribir.write(factorXcry + "0" + factorXcry + "\n");
      escribir.write(factorXcry + factorXcry + "0 \n");
      /**
      * The states are gone over with in each will be some more XCrysden structure.
      */
      for (State s : experiment.evolution) {
      escribir.write("PRIMCOORD" + index++ + "\n");
      escribir.write(nPartCell + "    1\n");
      /**
      * Particles involved in the film are gone over and positions and velocities are printed in the
      * file.
      */
      for (Particle p : s.particles) {
      double x = p.r.x * lengthConverterA;
      double y = p.r.y * lengthConverterA;
      double z = p.r.z * lengthConverterA;
      double vx = p.v.x * velocityConverterA;
      double vy = p.v.y * velocityConverterA;
      double vz = p.v.z * velocityConverterA;
      escribir.write(experiment.atomicNumber + " " + x + " " + y + " " + z + " " + vx + " " + vy + " "
      + vz + "\n");
      }
      }
      escribir.close();
      } catch (Exception e) {
      resultsFiles.velocityMovieData = null;
      }
    }

    /**
     * This creates a velocity movie, with the particle's positions and the forces (proportional
     * to acelerations) represented as arrows. It exports a text file which, latter on, 
     * can be read by xCryDen program (externaly). The name is written in files,
     * from ResultsFiles.
     */
    public void forceMovie() {
      try {
      double factorXcry = experiment.cellsInMoviePerAxis * experiment.cellSize;
      int index = 1;
      resultsFiles.forceMovieData = resultsFiles.forceMovieData + ".xsf";
      /**
      * The text file is created with its name and start writing.
      */
      File archivo = new File(resultsFiles.forceMovieData);
      FileWriter escribir = new FileWriter(archivo, true);
      /**
      * This will be the top of the text file with an appropriate structure to be
      * read by XCrysden.
      */
      escribir.write("ANIMSTEPS " + nSteps + "\n");
      escribir.write("CRYSTAL \n");
      escribir.write("PRIMVEC\n");
      escribir.write("0" + factorXcry + factorXcry + "\n");
      escribir.write(factorXcry + "0" + factorXcry + "\n");
      escribir.write(factorXcry + factorXcry + "0 \n");
      /**
      * The states are gone over with in each will be some more XCrysden structure.
      */
      for (State s : experiment.evolution) {
      escribir.write("PRIMCOORD" + index++ + "\n");
      escribir.write(nPartCell + "    1\n");
      /**
      * Particles involved in the film are gone over and positions and forces are printed in the
      * file.
      */
      for (Particle p : s.particles) {
      double x = p.r.x * lengthConverterA;
      double y = p.r.y * lengthConverterA;
      double z = p.r.z * lengthConverterA;
      double ax = p.a.x * forceConverterA;
      double ay = p.a.y * forceConverterA;
      double az = p.a.z * forceConverterA;
      escribir.write(experiment.atomicNumber + " " + x + " " + y + " " + z + " " + ax + " " + ay + " "
      + az + "\n");
      }
      }
      escribir.close();
      } catch (Exception e) {
      resultsFiles.forceMovieData = null;
      }
    }

  }

}
